apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: omegaup-backend-pvc
spec:
  resources:
    requests:
      storage: 100Gi
  accessModes:
  - ReadWriteOnce
  volumeName: omegaup-backend-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: omegaup-grader-pvc3
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
  - ReadWriteOnce
---
apiVersion: apps/v1
kind: Deployment

metadata:
  name: grader-deployment
  labels:
    app.kubernetes.io/name: grader
    app.kubernetes.io/part-of: backend
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grader
  strategy:
    # This might cause some runners to get really confused and send the wrong
    # thing to the wrong server, _but_ everything should be okay in the end:
    # they will be able to retry. The important thing is that the frontend can
    # still send submissions without interruption.
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grader
        app.kubernetes.io/part-of: backend
        app.kubernetes.io/component: grader
      annotations:
        prometheus.io/port: '6060'
        prometheus.io/scrape: 'true'
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 5
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - gitserver
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: grader
        image: omegaup/backend
        command: ['/usr/bin/omegaup-grader']
        ports:
        - name: grader
          containerPort: 21680
        - name: grader-runner
          containerPort: 11302
        - name: ephemeral
          containerPort: 36663
        - name: prometheus
          containerPort: 6060
        resources:
          limits:
            cpu: 350m
            memory: 1300Mi
          requests:
            cpu: 50m
            memory: 16Mi
        volumeMounts:
        - name: grader-secret
          mountPath: /etc/omegaup/grader
        - name: omegaup-grader
          mountPath: /var/lib/omegaup
        readinessProbe:
          httpGet:
            path: /metrics
            port: prometheus
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /metrics
            port: prometheus
          initialDelaySeconds: 15
          periodSeconds: 20
      volumes:
      - emptyDir:
          sizeLimit: 50Gi
        name: omegaup-grader
      - name: grader-secret
        secret:
          secretName: grader-secret
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: Service

metadata:
  name: grader-service
  labels:
    app.kubernetes.io/name: grader
    app.kubernetes.io/part-of: backend
  annotations:
    prometheus.io/port: '6060'
    prometheus.io/scrape: 'true'
spec:
  selector:
    app.kubernetes.io/name: grader
  ports:
  - name: grader
    protocol: TCP
    port: 21680
    targetPort: 21680
  - name: grader-runner
    protocol: TCP
    port: 11302
    targetPort: 11302
  - name: ephemeral
    protocol: TCP
    port: 36663
    targetPort: 36663
  - name: prometheus
    protocol: TCP
    port: 6060
    targetPort: 6060
---
apiVersion: apps/v1
kind: Deployment

metadata:
  name: gitserver-deployment
  labels:
    app.kubernetes.io/name: gitserver
    app.kubernetes.io/part-of: backend
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gitserver
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gitserver
        app.kubernetes.io/part-of: backend
        app.kubernetes.io/component: grader
      annotations:
        prometheus.io/port: '6060'
        prometheus.io/scrape: 'true'
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 5
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - grader
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: gitserver
        image: omegaup/gitserver
        command: ['/usr/bin/omegaup-gitserver']
        ports:
        - name: gitserver
          containerPort: 33861
        - name: pprof
          containerPort: 33682
        - name: prometheus
          containerPort: 6060
        resources:
          limits:
            cpu: 350m
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 16Mi
        readinessProbe:
          httpGet:
            path: /health/ready
            port: gitserver
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health/live
            port: gitserver
          initialDelaySeconds: 15
          periodSeconds: 20
        volumeMounts:
        - name: gitserver-secret
          mountPath: /etc/omegaup/gitserver
        - name: omegaup-backend
          mountPath: /var/lib/omegaup
      volumes:
      - name: omegaup-backend
        persistentVolumeClaim:
          claimName: omegaup-backend-pvc
      - name: gitserver-secret
        secret:
          secretName: gitserver-secret
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: Service

metadata:
  name: gitserver-service
  labels:
    app.kubernetes.io/name: gitserver
    app.kubernetes.io/part-of: backend
  annotations:
    prometheus.io/port: '6060'
    prometheus.io/scrape: 'true'
spec:
  selector:
    app.kubernetes.io/name: gitserver
  ports:
  - name: gitserver
    protocol: TCP
    port: 33861
    targetPort: 33861
---
apiVersion: apps/v1
kind: Deployment

metadata:
  name: broadcaster-deployment
  labels:
    app.kubernetes.io/name: broadcaster
    app.kubernetes.io/part-of: backend
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: broadcaster
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: broadcaster
        app.kubernetes.io/part-of: backend
      annotations:
        prometheus.io/port: '6060'
        prometheus.io/scrape: 'true'
    spec:
      containers:
      - name: broadcaster
        image: omegaup/backend
        command: ['/usr/bin/omegaup-broadcaster']
        ports:
        - name: broadcaster
          containerPort: 32672
        - name: events
          containerPort: 22291
        - name: prometheus
          containerPort: 6060
        resources:
          limits:
            cpu: 100m
            memory: 32Mi
          requests:
            cpu: 50m
            memory: 8Mi
        volumeMounts:
        - name: broadcaster-secret
          mountPath: /etc/omegaup/broadcaster
      volumes:
      - name: broadcaster-secret
        secret:
          secretName: broadcaster-secret
---
apiVersion: v1
kind: Service

metadata:
  name: broadcaster-service
  labels:
    app.kubernetes.io/name: broadcaster
    app.kubernetes.io/part-of: backend
  annotations:
    prometheus.io/port: '6060'
    prometheus.io/scrape: 'true'
spec:
  selector:
    app.kubernetes.io/name: broadcaster
  ports:
  - name: broadcaster
    port: 32672
    targetPort: 32672
  - name: events
    port: 22291
    targetPort: 22291
